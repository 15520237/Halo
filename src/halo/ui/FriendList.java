package halo.ui;

import halo.Halo;
import halo.Listener;
import halo.models.User;
import halo.ui.call.RequestCallForm;
import halo.voice.VoiceClient;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Phan Hieu
 */
public class FriendList extends javax.swing.JFrame {

    private User user;
    private User friendRightClick;
    private ImageIcon defaultUserIcon;

    /**
     * Creates new form FriendList
     */
    public FriendList() {
        initComponents();
        this.user = new User();

        try {
            BufferedImage bufferedImage = ImageIO.read(getClass().getResource("/halo/resources/no-user-image-square.jpg"));
            Image newimg = bufferedImage.getScaledInstance(avatarLabel.getWidth(), avatarLabel.getHeight(), java.awt.Image.SCALE_SMOOTH);
            defaultUserIcon = new ImageIcon(newimg);
        } catch (IOException ex) {
            defaultUserIcon = new ImageIcon();
        }

        updateInfo();
    }

    public FriendList(User user) {
        initComponents();
        this.user = user;

        try {
            BufferedImage bufferedImage = ImageIO.read(getClass().getResource("/halo/resources/no-user-image-square.jpg"));
            Image newimg = bufferedImage.getScaledInstance(avatarLabel.getWidth(), avatarLabel.getHeight(), java.awt.Image.SCALE_SMOOTH);
            defaultUserIcon = new ImageIcon(newimg);
        } catch (IOException ex) {
            defaultUserIcon = new ImageIcon();
        }

        updateInfo();
    }

    public void updateInfo() {
        this.setTitle("Halo chat view");
        this.userNameLabel.setText(this.user.getUserName());
        if (this.user.isIsOnline()) {
            this.onlineComboBox.setSelectedIndex(0);
        } else {
            this.onlineComboBox.setSelectedIndex(1);
        }
        try {
            if (this.user.getAvatar() != null && this.user.getAvatar().length > 0) {
                BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(this.user.getAvatar()));
                Image newimg = bufferedImage.getScaledInstance(avatarLabel.getWidth(), avatarLabel.getHeight(), java.awt.Image.SCALE_SMOOTH);
                avatarLabel.setIcon(new ImageIcon(newimg));
            } else {
                avatarLabel.setIcon(defaultUserIcon);
            }
        } catch (IOException ex) {
            avatarLabel.setIcon(defaultUserIcon);
        }
        getFriends();
    }

    public void getFriends() {
        try {
            List<User> friends = this.user.getFriends();
            if (friends != null) {
                friendList.removeAll();
                DefaultListModel<User> defaultListModel = new DefaultListModel<>();
                friends.forEach((friend) -> {
                    defaultListModel.addElement(friend);
                });
                friendList.setModel(defaultListModel);
                friendList.setCellRenderer(new UserRenderer());
            }

        } catch (SQLException ex) {
            Logger.getLogger(FriendList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        avatarMenu = new javax.swing.JPopupMenu();
        jMenuItemDelete = new javax.swing.JMenuItem();
        friendMenu = new javax.swing.JPopupMenu();
        jMenuItemUnFriend = new javax.swing.JMenuItem();
        jMenuItemChatText = new javax.swing.JMenuItem();
        jMenuItemChatVoice = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        friendList = new javax.swing.JList<>();
        statusTextField = new javax.swing.JTextField();
        avatarLabel = new javax.swing.JLabel();
        userNameLabel = new javax.swing.JLabel();
        onlineComboBox = new javax.swing.JComboBox<>();
        findFriendBtn = new javax.swing.JButton();

        jMenuItemDelete.setText("Delete");
        jMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeleteActionPerformed(evt);
            }
        });
        avatarMenu.add(jMenuItemDelete);

        jMenuItemUnFriend.setText("Unfriend");
        jMenuItemUnFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemUnFriendActionPerformed(evt);
            }
        });
        friendMenu.add(jMenuItemUnFriend);

        jMenuItemChatText.setText("Chat Text");
        jMenuItemChatText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChatTextActionPerformed(evt);
            }
        });
        friendMenu.add(jMenuItemChatText);

        jMenuItemChatVoice.setText("Chat Voice");
        jMenuItemChatVoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemChatVoiceActionPerformed(evt);
            }
        });
        friendMenu.add(jMenuItemChatVoice);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        friendList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        friendList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(friendList);

        statusTextField.setText("What's happening today?");
        statusTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusTextFieldActionPerformed(evt);
            }
        });

        avatarLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                avatarLabelMouseClicked(evt);
            }
        });

        userNameLabel.setText("username");

        onlineComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Online", "Offline" }));
        onlineComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineComboBoxActionPerformed(evt);
            }
        });

        findFriendBtn.setText("Find friend");
        findFriendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findFriendBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .addComponent(statusTextField)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(avatarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userNameLabel)
                                    .addComponent(onlineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(findFriendBtn)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(userNameLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(onlineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(avatarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(findFriendBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void statusTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusTextFieldActionPerformed
        try {
            // setting status
            this.user.setStatus(statusTextField.getText());
        } catch (SQLException ex) {
            Logger.getLogger(FriendList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_statusTextFieldActionPerformed

    private void onlineComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onlineComboBoxActionPerformed
        // setting online status 
        try {
            if ("Online".equals(onlineComboBox.getSelectedItem().toString())) {
                this.user.setIsOnline(true);
            } else {
                this.user.setIsOnline(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(FriendList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_onlineComboBoxActionPerformed

    private void findFriendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findFriendBtnActionPerformed
        String userToAdd = JOptionPane.showInputDialog("Please input the friend you want to add !");
        if (userToAdd == null || userToAdd.trim() == "") {
            return;
        }

        try {
            User userAdded = User.getUser(userToAdd);

            if (userAdded == null) {
                JOptionPane.showMessageDialog(rootPane, "User doesn't exists", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (userToAdd.equals(this.user.getUserName())) {
                JOptionPane.showMessageDialog(rootPane, "Choose other name", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (this.user.isFriendOf(userAdded)) {
                JOptionPane.showMessageDialog(rootPane, userToAdd + " has been friend of you", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                this.user.addFriend(userAdded);
                this.getFriends();
            }
        } catch (SQLException ex) {
            Logger.getLogger(FriendList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findFriendBtnActionPerformed

    private void avatarLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_avatarLabelMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            avatarMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        } else {
            JFileChooser jfc = new JFileChooser();
            jfc.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "bmp"));
            int returnVal = jfc.showOpenDialog(jfc);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = jfc.getSelectedFile();
                    this.user.setAvatar(Files.readAllBytes(file.toPath()));

                    Image image = ImageIO.read(file);
                    Image newimg = image.getScaledInstance(avatarLabel.getWidth(), avatarLabel.getHeight(), java.awt.Image.SCALE_SMOOTH);
                    avatarLabel.setIcon(new ImageIcon(newimg));
                } catch (OutOfMemoryError ex) {
                    System.out.println("File có kích thước quá lớn");
                } catch (SQLException ex) {
                    System.out.println("Lỗi CSDL");
                } catch (IOException ex) {
                    Logger.getLogger(FriendList.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_avatarLabelMouseClicked

    private void jMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeleteActionPerformed
        try {
            this.user.deleteAvatar();
            avatarLabel.setIcon(defaultUserIcon);
        } catch (SQLException ex) {
            Logger.getLogger(FriendList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemDeleteActionPerformed

    private void friendListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendListMouseClicked
        JList source = (JList) evt.getSource();
        if (SwingUtilities.isRightMouseButton(evt)) {//right click
            this.friendRightClick = (User) source.getSelectedValue();
            friendMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        } else if (evt.getClickCount() == 2) {
            // Check double click on item
            User selectedUser = (User) source.getSelectedValue();
            if (!Listener.isChattingWith(selectedUser)) { // Check if we are already chatting with this user
                new ChatForm(selectedUser).setVisible(true);
            }
        }
    }//GEN-LAST:event_friendListMouseClicked

    private void jMenuItemUnFriendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemUnFriendActionPerformed
        try {
            this.user.unFriend(friendRightClick);
            this.getFriends();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemUnFriendActionPerformed

    private void jMenuItemChatTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChatTextActionPerformed
        if (!Listener.isChattingWith(friendRightClick)) { // Check if we are already chatting with this user
            new ChatForm(friendRightClick).setVisible(true);
        }
    }//GEN-LAST:event_jMenuItemChatTextActionPerformed

    private void jMenuItemChatVoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemChatVoiceActionPerformed
        try {
            Halo.isCalling = true;
            RequestCallForm requestCallingForm = new RequestCallForm(this.friendRightClick);
            requestCallingForm.setVisible(true);
            new VoiceClient(this.friendRightClick.getAddrListening(), this.friendRightClick.getPortListening(), requestCallingForm).start();
        } catch (IOException ex) {
            Halo.isCalling = false;
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemChatVoiceActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            this.user.setIsOnline(false);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FriendList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FriendList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel avatarLabel;
    private javax.swing.JPopupMenu avatarMenu;
    private javax.swing.JButton findFriendBtn;
    private javax.swing.JList<User> friendList;
    private javax.swing.JPopupMenu friendMenu;
    private javax.swing.JMenuItem jMenuItemChatText;
    private javax.swing.JMenuItem jMenuItemChatVoice;
    private javax.swing.JMenuItem jMenuItemDelete;
    private javax.swing.JMenuItem jMenuItemUnFriend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> onlineComboBox;
    private javax.swing.JTextField statusTextField;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables

}
